/* Advanced Media Queries v1.0 */
//  David Castner

//  How to use:
//  include this in at the top of your scss file
//  @import "/path/to/file/advanced-media-queries";

//  Platform breakpoints
//           mobile  <  MTB
//  MTB  <=  tablet  <  TDB
//  TDB  <   desktop
$mobile-tablet-breakpoint: 768px;   // (MTB)
$tablet-desktop-breakpoint: 1024px; // (TDB)
$mobile-upper-breakpoint: $mobile-tablet-breakpoint - 1;
$tablet-lower-breakpoint: $mobile-tablet-breakpoint;
$tablet-upper-breakpoint: $tablet-desktop-breakpoint - 1;
$desktop-lower-breakpoint: $tablet-desktop-breakpoint;

//  Helpers
//  @include advanced-media-queries-hide;
@mixin advanced-media-queries-hide { display: none !important; };

//  Display mixins available in scss:
//
//  @include show-on-mobile;
//  @include show-on-tablet;
//  @include show-on-desktop;
//  @include show-on-portrait;
//  @include show-on-landscape;
//
//  @include hide-on-mobile;
//  @include hide-on-tablet;
//  @include hide-on-desktop;
//  @include hide-on-portrait;
//  @include hide-on-landscape;
@mixin show-on-mobile {
    @media only screen and (min-width: $tablet-lower-breakpoint) {
        @include advanced-media-queries-hide;
    }
};
@mixin show-on-tablet {
    @media only screen and (max-width: $mobile-upper-breakpoint) {
        @include advanced-media-queries-hide;
    }
    @media only screen and (min-width: $desktop-lower-breakpoint) {
        @include advanced-media-queries-hide;
    }
};
@mixin show-on-desktop {
    @media only screen and (max-width: $tablet-upper-breakpoint) {
        @include advanced-media-queries-hide;
    }
};
@mixin show-on-portrait {
    @media only screen and (orientation: landscape) {
        @include advanced-media-queries-hide;
    }
};
@mixin show-on-landscape {
    @media only screen and (orientation: portrait) {
        @include advanced-media-queries-hide;
    }
};
@mixin hide-on-mobile {
    @media only screen and (max-width: $mobile-upper-breakpoint) {
        @include advanced-media-queries-hide;
    }
};
@mixin hide-on-tablet {
    @media only screen and (min-width: $tablet-lower-breakpoint) and (max-width: $tablet-upper-breakpoint) {
        @include advanced-media-queries-hide;
    }
};
@mixin hide-on-desktop {
    @media only screen and (min-width: $desktop-lower-breakpoint) {
        @include advanced-media-queries-hide;
    }
};
@mixin hide-on-portrait {
    @media only screen and (orientation: portrait) {
        @include advanced-media-queries-hide;
    }
};
@mixin hide-on-landscape {
    @media only screen and (orientation: landscape) {
        @include advanced-media-queries-hide;
    }
};

//  Style mixins available in scss:
//  @include mobile-only-style { style_for_media_query };
//  @include tablet-only-style { style_for_media_query };
//  @include desktop-only-style { style_for_media_query };
//  @include portrait-only-style { style_for_media_query };
//  @include landscape-only-style { style_for_media_query };
@mixin mobile-only-style {
    @media only screen and (max-width: $mobile-upper-breakpoint) {
        @content;
    }
};
@mixin tablet-only-style {
    @media only screen and (min-width: $tablet-lower-breakpoint) and (max-width: $tablet-upper-breakpoint) {
        @content;
    }
};
@mixin desktop-only-style {
    @media only screen and (min-width: $desktop-lower-breakpoint) {
        @content;
    }
};
@mixin portrait-only-style {
    @media only screen and (orientation: portrait) {
        @content;
    }
};
@mixin landscape-only-style {
    @media only screen and (orientation: landscape) {
        @content;
    }
};

// CUSTOM BREAKPOINTS

//  custom-breakpoint-show 
//  only displays the element if [$min <=] screen width [< $max]
//
//  Examples:
//      @include custom-breakpoint-show($min: $show-min-breakpoint);
//      @include custom-breakpoint-show($max: $show-max-breakpoint);
//      @include custom-breakpoint-show($min: $show-min-breakpoint, $max: $show-max-breakpoint);
@mixin custom-breakpoint-show($min: false, $max: false) {
    @if (not $min) and (not $max) {
        @error "at least one of $min or $max must be defined";
    };
    @if $min {
        @media only screen and (max-width: $min - 1) {
            @include advanced-media-queries-hide;
        }
    };
    @if $max {
        @media only screen and (min-width: $max) {
            @include advanced-media-queries-hide;
        }
    };
};

//  custom-breakpoint-hide
//  hides the element if [$min <=] screen width [< $max]
//
//  Examples:
//      @include custom-breakpoint-hide($min: $hide-min-breakpoint);
//      @include custom-breakpoint-hide($max: $hide-max-breakpoint);
//      @include custom-breakpoint-hide($min: $hide-min-breakpoint, $max: $hide-max-breakpoint);
@mixin custom-breakpoint-hide($min: false, $max: false) {
    @if not $min {
        @if not $max {
            @error "at least one of $min or $max must be defined";
        };
        @if $max {
            // only a max value was defined
            @media only screen and (max-width: $max - 1) {
                @include advanced-media-queries-hide;
            }
        };
    };
    @if $min {
        @if not $max {
            // only a min value was defined
            @media only screen and (min-width: $min) {
                @include advanced-media-queries-hide;
            }
        };
        @if $max {
            // both a min and max value were defined
            @media only screen and (min-width: $min) and (max-width: $max - 1) {
                @include advanced-media-queries-hide;
            }
        };
    };
};

//  custom-breakpoint-style
//  applies the style if [$min <=] screen width [< $max]
//
//  Examples:
//      @include custom-breakpoint-style($min: $style-min-breakpoint) { style_for_media_query };
//      @include custom-breakpoint-style($max: $style-max-breakpoint) { style_for_media_query };
//      @include custom-breakpoint-style($min: $style-min-breakpoint, $max: $style-max-breakpoint) { style_for_media_query };
@mixin custom-breakpoint-style($min: false, $max: false) {
    @if not $min {
        @if not $max {
            @error "at least one of $min or $max must be defined";
        };
        @if $max {
            // only a max value was defined
            @media only screen and (max-width: $max - 1) {
                @content;
            }
        };
    };
    @if $min {
        @if not $max {
            // only a min value was defined
            @media only screen and (min-width: $min) {
                @content;
            }
        };
        @if $max {
            // both a min and max value were defined
            @media only screen and (min-width: $min) and (max-width: $max - 1) {
                @content;
            }
        };
    };
};
